import{c as u,a as i,f as c,b as m}from"./2.s8k01y5E.js";const l={name:"Chess",attributes:[{name:"dailyPuzzle",type:"object"},{name:"numberOfExercises",type:"number"},{name:"numberOfGames",type:"number"}],decisions:[{conditions:{all:[{fact:"dailyPuzzle",operator:"equal",value:!0},{fact:"numberOfExercises",operator:"greaterThan",value:0},{fact:"numberOfGames",operator:"greaterThan",value:0},{fact:"date",operator:"withinDatesRange",value:["2024-07-01",new Date().toISOString()]}]},event:{type:"blue",params:{color:"blue",value:3}}},{conditions:{all:[{fact:"dailyPuzzle",operator:"equal",value:!0},{fact:"numberOfExercises",operator:"equal",value:0},{fact:"numberOfGames",operator:"equal",value:0}]},event:{type:"yellow",params:{color:"yellow",value:1}}},{conditions:{all:[{fact:"dailyPuzzle",operator:"equal",value:!0},{any:[{fact:"numberOfExercises",operator:"greaterThan",value:0},{fact:"numberOfGames",operator:"greaterThan",value:0}]}]},event:{type:"green",params:{color:"green",value:2}}}]};class g{constructor(a,s){this.chessDotComLogs=a,this.woodpeckerLogs=s;const t={dailyPuzzle:!1,numberOfExercises:0,numberOfGames:0,date:new Date("2020-20-2"),value:0},o=Object.keys(t);this.logKeys=o;let e=u(a,s,"date");e=e.map(n=>{for(const r of this.logKeys)Object.hasOwn(n,r)||(n[r]=t[r]);return n}),this.logs=e}async generateValue(){const a=i();for(const t of l.decisions)a.addRule(t);const s=[];for(const t of this.logs){const{events:o}=await a.run(t),e=o[0];s.push({...t,...e.params})}return this.logs=s,s}generateDomains(){return Array.from(new Set(l.decisions.map(a=>a.event.params.value)))}generateRanges(){return Array.from(new Set(l.decisions.map(a=>a.event.params.color)))}toolTip(a,s,t,o){if(s){const e=c(new Date(t),o.logs);if(e){let n=[];for(const r of this.logKeys)r!="date"&&(e[r]==!0&&e||e[r]>0)&&n.push(`${m(r)}: ${e[r]}`);return n.join(`.
`)}}return""}}export{g as default};
